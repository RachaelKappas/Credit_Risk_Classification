# -*- coding: utf-8 -*-
"""credit_risk_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Y0bsN0HDEe_IjYAq6nAzc1uJ8Cya6S1
"""

# Import the modules
import numpy as np
import pandas as pd
from pathlib import Path
from sklearn.metrics import confusion_matrix, classification_report

"""---

## Split the Data into Training and Testing Sets

### Step 1: Read the `lending_data.csv` data from the `Resources` folder into a Pandas DataFrame.
"""

# Upload the CSV file
from google.colab import files

uploaded = files.upload()

# Read the CSV file from the Resources folder into a Pandas DataFrame
df = pd.read_csv('lending_data.csv')

# Review the DataFrame
df.head()

"""### Step 2: Create the labels set (`y`)  from the “loan_status” column, and then create the features (`X`) DataFrame from the remaining columns."""

# Separate the data into labels and features

# Separate the y variable, the labels
y = df['loan_status']

# Separate the X variable, the features
X = df.drop(columns=['loan_status'])

# Review the y variable Series
print(y.head())          # Display the first few rows
print(y.describe())      # Display summary statistics
print(y.value_counts())  # Display unique values and their counts

# Review the X variable DataFrame
print(X.head())          # Display the first few rows
print(X.describe())      # Display summary statistics
print(X.info())          # Display the DataFrame information
print(X.columns)         # Display the column names

"""### Step 3: Split the data into training and testing datasets by using `train_test_split`."""

# Import the train_test_learn module
from sklearn.model_selection import train_test_split

# Split the data using train_test_split
# Assign a random_state of 1 to the function
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

"""---

## Create a Logistic Regression Model with the Original Data

###  Step 1: Fit a logistic regression model by using the training data (`X_train` and `y_train`).
"""

# Import the LogisticRegression module from SKLearn
from sklearn.linear_model import LogisticRegression

# Instantiate the Logistic Regression model
# Assign a random_state parameter of 1 to the model
model = LogisticRegression(random_state=1)

# Fit the model using training data
model.fit(X_train, y_train)

"""### Step 2: Save the predictions on the testing data labels by using the testing feature data (`X_test`) and the fitted model."""

# Make a prediction using the testing data
y_pred = model.predict(X_test)

# Display the first few predictions
print(y_pred[:10])

"""### Step 3: Evaluate the model’s performance by doing the following:

* Generate a confusion matrix.

* Print the classification report.
"""

# Generate a confusion matrix for the model
conf_matrix = confusion_matrix(y_test, y_pred)

# Print the confusion matrix
print("Confusion Matrix:")
print(conf_matrix)

# Print the classification report for the model
class_report = classification_report(y_test, y_pred)

print("\nClassification Report:")
print(class_report)

"""### Step 4: Answer the following question.

**Question:** How well does the logistic regression model predict both the `0` (healthy loan) and `1` (high-risk loan) labels?

**Answer:** Overall, the logistic regression model demonstrates strong performance, particularly in identifying healthy loans, while also effectively detecting high-risk loans with room for refinement in precision.

---
"""